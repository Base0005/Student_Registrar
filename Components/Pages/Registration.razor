@page "/Registration"
@rendermode InteractiveServer
@inject DataService ds
@inject NavigationManager Navigation

<pagetitle class="StudentTitle">Add A Student</pagetitle>

<div class="InputArea">
    <EditForm class="DisplayInput" Model="@student" OnValidSubmit="HandleValidSubmit" FormName="StudentRegistration">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="fname">
            <label for="fname">First name:</label>
            <InputText id="fname" @bind-Value="student.FirstName" placeholder="Insert First Name" />
        </div>
        <div class="lname">
            <label for="lname">Last name:</label>
            <InputText id="lname" @bind-Value="student.LastName" placeholder="Insert Last Name" />
        </div>
        <div class="RType">
            <label for="StudentType">Student Type:</label>
            <InputSelect id="Type" @bind-Value="student.Type">
                <option value="" disabled>Select The Student Type</option>
                <option value="Full Time">Full-Time</option>
                <option value="Part Time">Part-Time</option>
                <option value="Coop">Coop</option>
            </InputSelect>
        </div>
        <button type="submit" class="StudentAdded">Add Student</button>
        <a class="ClassCancel" href="/">Cancel</a>
    </EditForm>
</div>

<NotificationBanner
    Message="@validationMessage"
    BannerType="@(!string.IsNullOrEmpty(validationMessage) && validationMessage.Contains("Error") ? "error" : "success")" />

@code {
    private Student student = new Student{ Type = "" };
    private string validationMessage;

    private async Task HandleValidSubmit()
    {
        validationMessage = string.Empty;

        if (string.IsNullOrWhiteSpace(student.FirstName))
        {
            validationMessage = "First name is required.";
            return;
        }

        if (string.IsNullOrWhiteSpace(student.LastName))
        {
            validationMessage = "Last name is required.";
            return;
        }

        if (string.IsNullOrWhiteSpace(student.Type))
        {
            validationMessage = "Student type is required.";
            return;
        }

        await SubmitRegistration();
    }

    private async Task SubmitRegistration()
    {
        int id = new Random().Next(100000, 900000);
        var sqlRegistrations = "INSERT INTO Student(Id, FirstName, LastName, Type) VALUES(@Id, @FirstName, @LastName, @Type)";
        
        try
        {
            await ds.SaveData(sqlRegistrations, new { Id = id, FirstName = student.FirstName, LastName = student.LastName, Type = student.Type });
            validationMessage = "Student added successfully!";
            Navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            validationMessage = $"An error occurred: {ex.Message}";
        }
    }

    public class Student
    {
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Type { get; set; }
    }
}
